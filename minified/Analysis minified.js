var endLogged,logFile=file("/storage/emulated/0/memento/Analysis log.txt"),strLog="",score={},diff={num:0,date:""},MAPos=["Contentment","Tranquility","Enthusiasm","Mental clarity","Processing speed","Focus","Energy","Motivation"],MANeg=["Fatigue","Sleepiness","Torso, leaden","Arms, leaden","Legs, leaden"],CAANeg=["Fatigue","Sleepiness","Anxiety","Depression","Irritation\t","Confrontational","Paranoia","Clumsiness","Torso, leaden","Arms, leaden","Legs, leaden"],arExercises=[{n:"glutes 1",i:3},{n:"glutes 2",i:5},{n:"squat",i:30},{n:"press up",i:30}];function overviewAnalysisAll(){message("overviewAnalysisAll started");try{for(var e=0;e<arEntries.length;e++)overviewAnalysis(e)}catch(e){var r=new Error("Rethrowing the "+e.message+" error, line: "+e.lineNumber);throw logFile.write(strLog),logFile.close(),r}message("overviewAnalysisAll completed")}function overviewAnalysis(e){strLog+="\n\nAnalysis main";var r=lib().entries();r=null!=e?r[e]:r[0],score={ma:0,caa:0,ovd:0},strLog+="\n\n"+r.field("Day start")+"\nscore: "+JSON.stringify(score),updateScoreSleepCAACycle(r),updateOverviewMA(r),updateScoreMA(r),updateScoreFirstIntake(r),updateScoreExerciseMA(r),updateScoreCAA(r,MAPos,CAANeg),updateScoreSleepCAA(r),updateScoreExerciseCAA(r),updateOverviewDuration(r),strLog+="\nend: score: "+JSON.stringify(score),r.set("Morning awakeness",parseFloat(score.ma.toFixed(2))),r.set("Contentment and alertness",parseFloat(score.caa.toFixed(2))),r.set("Overview duration",parseFloat(score.ovd.toFixed(2))),logFile.write(strLog),logFile.close()}function updateScoreSleepCAACycle(e){strLog+="\n\nupdateScoreSleepCAACycle\nscore: "+JSON.stringify(score);var r=getEndLogged(e);if(null!=r){endLogged=parseInt(parseFloat(r.h))<10?"0"+r.h:r.h,endLogged+=":"+parseInt(parseFloat(r.m))<10?"0"+r.m:r.m;var t=getEndSC(e);if(strLog+="\nendLogged: "+JSON.stringify(endLogged)+"\nel: "+JSON.stringify(r)+"\nendSC: "+JSON.stringify(t),null!=t){if(eDiff=getDiff(r,t),null==eDiff)return strLog+="\nupdateScoreSleepCAACycle: eDiff == null\nscore: "+JSON.stringify(score),null;score.ma+=(3-eDiff)/3,strLog+="\nscore: "+JSON.stringify(score)}return strLog+="\nupdateScoreSleepCAACycle: endSC == null",null}return strLog+="\nupdateScoreSleepCAACycle: endLogged == null",null}function getEndLogged(e){var r,t,n=[];return e.field("Sleep - night").split("\n").map(e=>"string"!=typeof e?null:null==(t=e.match(/Sleep @ (\d+):(\d+), (\d+)(.\d+).*/))?null:(t[1]=parseInt(parseFloat(t[1]))+parseInt(parseFloat(t[3])),t[1]>24&&(t[1]-=24),t[2]=Math.round(parseFloat(t[2])+60*parseFloat(t[4])),t[2]>60&&(t[2]-=60,t[1]+=1),r={h:t[1],m:t[2]},void n.push(r))),n.length>0?(r={h:0,m:0},n.map(e=>{e.h<12&&e.h>r.h&&(r=e)}),r):null}function getEndSC(e){var r=e.field("Sleep Cycle data");return null!=(r=r.match(/.* to (\d+):(\d+)/))?{h:parseInt(parseFloat(r[1])),m:parseInt(parseFloat(r[2]))}:null}function getDiff(e,r){strLog+="\ngetDiff: el: "+JSON.stringify(e)+" endSC: "+JSON.stringify(r),e.m-=r.m,e.m<0&&(e.m+=60,e.h-=1);var t=parseFloat((e.h-r.h+e.m/60).toFixed(2));return strLog+="\ngetDiff: res: "+t,t>=0?(strLog+="\ngetDiff: res: "+t,t):(strLog+="\ngetDiff: Negative difference, res: "+t,null)}function getSymValMA(e,r){for(var t=e.field("Symptoms - current").split("\n"),n=0;n<t.length;n++){var s=t[n].match(new RegExp(".*"+r+".*?(\\[.*\\])"));if(null!=s){if(strLog+="\ngetSymValMA: m: "+s,1==(s=JSON.parse(s[1])).length){var a=parseInt(parseFloat(s[0][1]));return strLog+="\ngetSymValMA: length == 1\ns: "+r+" r: "+a,a}for(var o=null,i=0;i<s.length;i++){if(s[i]>endLogged||s[i]<"04:00")return null==o?(a=parseInt(parseFloat(s[i][1])),strLog+="\ngetSymValMA: no stored value\ns: "+r+" r: "+a,a):(a=parseInt(parseFloat(o)),strLog+="\ngetSymValMA: stored value\ns: "+r+" r: "+a,a);o=s[i][1]}}}return strLog+="\ngetSymValMA: failed to find symptom: "+r,0}function updateOverviewMA(e){strLog+="\n\nupdateOverviewMA\nendLogged: "+endLogged;for(var r=e.field("Average overview breakdown").split("\n"),t=0;t<r.length;t++)if(strLog+="\no[a]: "+r[t],r[t]>endLogged){var n=r[t].match(/\d+:\d+ - (\d+)/)[1];return strLog+="\nr: "+n,score.ma+=n/8,n}return strLog+="\nupdateOverviewMA: No time found",null}function updateScoreMA(e){strLog+="\nupdateScoreMA\nscore: "+JSON.stringify(score),MAPos.map(r=>{score.ma+=getSymValMA(e,r)/5}),MANeg.map(r=>{score.ma+=(5-getSymValMA(e,r))/5}),strLog+="\nscore: "+JSON.stringify(score)}function updateScoreFirstIntake(e){strLog+="\nupdateScoreFirstIntake\nscore: "+JSON.stringify(score);for(var r,t,n=e.field("Intake - combined").split("\n\n"),s="",a=0;a<n.length;a++)if((r=n[a].split("\n")).length>4){s=r[0].trim(),strLog+="\nupdateScoreFirstIntake: time: "+s;break}strLog+="\nupdateScoreFirstIntake: time: "+(s=""==s?"08:45":s),strLog+="\nupdateScoreFirstIntake: diff: "+(t=s>"11:00"?0:s>"10:00"?.4:s>"08:45"?.75:s>"06:30"?1:0),score.ma+=t,strLog+="\nupdateScoreFirstIntake\nscore: "+JSON.stringify(score)}function updateScoreExerciseMA(e){strLog+="\nupdateScoreExerciseMA\nscore: "+JSON.stringify(score);for(var r,t,n=e.field("Exercise breakdown").split("\n\n"),s=0;s<n.length;s++)if(exLines=n[s].split("\n"),null!=(r=exLines[0].match(/(\d+:\d+).*/))&&r[1]<"10:00"){strLog+="\nupdateScoreExerciseMA: time: "+r;for(var a=0;a<arExercises.length;a++)null!=(t=n[s].match(new RegExp("^(\\d+)\\s+"+arExercises[a].n)))&&(strLog+="\nupdateScoreExerciseMA: exL"+JSON.stringify(t),score.ma+=t[1]/arExercises[a].i)}strLog+="\nupdateScoreExerciseMA\nscore: "+JSON.stringify(score)}function timeStringToObject(e){return null!=(e=e.match(/(\d+):(\d+)/))?{h:parseFloat(e[1]),m:parseFloat(e[2])}:(strLog+="\ntimeStringToObject failed with "+e,null)}function getSpan(e,r){strLog+="\ngetSpan: t0: "+e+", t1: "+r,e=timeStringToObject(e),r=timeStringToObject(r),strLog+="\ngetSpan: t0: "+JSON.stringify(e)+"\nt1: "+JSON.stringify(r);var t={h:0,m:r.m-e.m};return t.m<0&&(t.m+=60,t.h-=1),t.h+=r.h-e.h,t.h<0&&(t.h+=24),strLog+="\ngetSpan 1: r: "+JSON.stringify(t),t=parseFloat((t.h+t.m/60).toFixed(2)),strLog+="\ngetSpan 2: r "+t,t}function getSymValCAA(e,r){for(var t=e.field("Symptoms - current").split("\n"),n=0;n<t.length;n++){var s=t[n].match(new RegExp(".*"+r+".*?(\\[.*\\])"));if(null!=s){if(strLog+="\ngetSymValCAA: m: "+s,s=JSON.parse(s[1]),strLog+="\ngetSymValCAA: m: "+JSON.stringify(s),1==s.length){var a=parseInt(parseFloat(s[0][1]));return strLog+="\ngetSymValCAA: length == 1\ns: "+r+" r: "+a,a}for(var o="04:00",i=0,l=0;l<s.length;l++)strLog+="\ngetSymValCAA: val: "+parseInt(parseFloat(s[l][1])),i+=getSpan(o,s[l][0])*parseInt(parseFloat(s[l][1])),o=s[l][0];return strLog+="\nngetSymValCAA: last val: "+parseInt(parseFloat(s[s.length-1][1])),i+=getSpan(o,"03:59")*parseInt(parseFloat(s[s.length-1][1])),strLog+="\ngetSymValCAA:\ns: "+r+" r: "+(a=i/24),a}}return strLog+="\ngetSymValCAA: no match for symptom "+r,0}function updateScoreCAA(e,r,t){strLog+="\nupdateScoreCAA\nscore: "+JSON.stringify(score),r.map(r=>{score.caa+=getSymValCAA(e,r)/5}),t.map(r=>{score.caa+=(5-getSymValCAA(e,r))/5}),strLog+="\nupdateScoreCAAscore: "+JSON.stringify(score)}function updateScoreSleepCAA(e){strLog+="\nupdateScoreSleepCAA\nscore: "+JSON.stringify(score);var r=e.field("Sleep - total day");r>6&&(r=6),score.caa+=(6-r)/6,strLog+="\nupdateScoreSleepCAA\nscore: "+JSON.stringify(score)}function updateScoreExerciseCAA(e){strLog+="\nupdateScoreExerciseCAA\nscore: "+JSON.stringify(score);for(var r,t,n=e.field("Exercise breakdown").split("\n\n"),s=0;s<n.length;s++)if(exLines=n[s].split("\n"),null!=(r=exLines[0].match(/(\d+:\d+).*/))){strLog+="\nupdateScoreExerciseCAA: time: "+r;for(var a=0;a<arExercises.length;a++)null!=(t=n[s].match(new RegExp("^(\\d+)\\s+"+arExercises[a].n)))&&(strLog+="\nupdateScoreExerciseCAA: exL"+JSON.stringify(t),score.caa+=t[1]/arExercises[a].i)}strLog+="\nupdateScoreExerciseCAA\nscore: "+JSON.stringify(score)}function updateOverviewDuration(e){var r=e.field("Average overview breakdown").split("\n");if(strLog+="\nupdateOverviewDuration: ov:\n"+JSON.stringify(r),r.length>0){var t,n,s=new RegExp("(\\d+:\\d+) - (\\d+)");if(1==r.length)t=parseFloat((parseFloat(r[0].match(s)[2])/8).toFixed(2)),isNaN(t)?strLog+="\nupdateOverviewDuration: non-numeric overview":(strLog+="\nupdateOverviewDuration: r: "+t,score.ovd=t);else{for(var a="04:00",o=0,i=0;i<r.length;i++)strLog+="\nupdateOverviewDuration: ov[c1]: "+r[i],n=r[i].match(s),strLog+="\nupdateOverviewDuration: l: "+n,o+=getSpan(a,n[1])*parseFloat(n[2]),a=n[1];o+=getSpan(a,"03:59")*parseInt(parseFloat(r[r.length-1].match(s)[2])),strLog+="\nupdateOverviewDuration:\nr: "+(t=o/24),score.ovd=t}}}function getSymChange(e,r){for(var t=e.field("Symptoms - current").split("\n"),n=0;n<t.length;n++){var s=t[n].match(new RegExp(".*"+r+".*?(\\[.*\\])"));if(null!=s){if(strLog+="\ngetSymChange: m: "+s,s=JSON.parse(s[1]),strLog+="\ngetSymChange: m: "+JSON.stringify(s),1==s.length){var a=0;return strLog+="\ngetSymChange: length == 1\ns: "+r+" r: "+a,a}for(var o,i=0,l=1;l<s.length;l++)o=parseFloat(s[cl][1])>parseFloat(s[cl-1][1]),strLog+="\ngetSymChange: val: "+parseInt(parseFloat(s[l][1])),o>0?i++:o<0&&i--;return strLog+="\nngetSymChange: last val: "+parseInt(parseFloat(s[s.length-1][1])),strLog+="\ngetSymChange:\ns: "+r+" r: "+a,i}}return strLog+="\ngetSymChange: no match for symptom "+r,0}message("Analysis loaded 2020-10-08 10:11");
